name: App build

on: 
  workflow_dispatch:
  # push:

jobs:
  release:
    name: Create release
    if: contains(github.ref, '/tags/')
    runs-on: ubuntu-22.04
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store release url
        run: echo "${{ steps.create_release.outputs.upload_url }}" > ./release_upload_url

      - name: Upload release url
        uses: actions/upload-artifact@v4
        with:
          path: ./release_upload_url
          name: release_upload_url

  build:
    name: Build ${{ matrix.config.name }}${{ matrix.config.tag }}
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 120
    env:
      OS: ${{ matrix.config.name }}
      MSVC_VERSION: C:/Program Files/Microsoft Visual Studio/2022/Enterprise
    strategy:
      matrix:
        config:
          - { name: "linux", os: ubuntu-22.04 }
          - { name: "win64", os: windows-latest }
          # - { name: "win32", os: windows-latest }
          # - { name: "macos", os: macos-latest }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install system libs (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev libxkbcommon-x11-0 libxcb-* build-essential cmake ninja-build pkg-config
          echo "QMAKE_FLAGS=QMAKE_CXX=g++-10 QMAKE_CC=gcc-10 QMAKE_LINK=g++-10" >> $GITHUB_ENV

      - name: Install system libs (Windows)
        if: runner.os == 'Windows'
        run: |
          # 安装必要的Windows构建工具
          choco install ninja cmake --yes
          echo "QMAKE_FLAGS=QMAKE_CXX=cl QMAKE_CC=cl QMAKE_LINK=link" >> $GITHUB_ENV
          
          # 设置Windows特定的环境变量
          echo "OS=win64" >> $GITHUB_ENV
          echo "MSVC_VERSION=C:/Program Files/Microsoft Visual Studio/2022/Enterprise" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ env.OS }}-${{ hashFiles('./share/ci/*.py') }}

      - name: Debug environment
        shell: bash
        run: |
          echo "=== Environment Debug Info ==="
          echo "OS: ${{ env.OS }}"
          echo "Platform: $(uname -a)"
          echo "Python version: $(python --version)"
          echo "Current directory: $(pwd)"
          echo "Available disk space:"
          df -h
          echo "Memory info:"
          free -h || echo "free command not available"
          echo "=== End Debug Info ==="

      - name: Check Windows environment
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo "=== Windows Environment Check ==="
          echo "Visual Studio version:"
          dir "C:\Program Files\Microsoft Visual Studio" 2>nul || echo "Visual Studio not found in default location"
          echo "Available Visual Studio installations:"
          where /q vswhere && vswhere -all -property installationPath || echo "vswhere not available"
          echo "CMake version:"
          cmake --version
          echo "Ninja version:"
          ninja --version
          echo "=== End Windows Check ==="

      - name: Setup build environment
        shell: bash
        run: |
          echo "Setting up build environment..."
          
          # 显示当前工作目录
          echo "Current working directory: $(pwd)"
          echo "Current directory contents:"
          ls -la
          
          # 创建必要的目录
          mkdir -p deps
          mkdir -p build
          
          # 设置环境变量
          export ST_DEPS_DIR=$(pwd)/deps
          export PATH=$(pwd)/qt/bin:$PATH
          
          # 检查依赖目录
          if [ -d "deps" ]; then
            echo "Dependencies directory exists"
            ls -la deps/
          else
            echo "Dependencies directory does not exist"
          fi
          
          # 检查Python和必要工具
          echo "Checking Python installation..."
          python --version
          which python
          
          # 检查构建脚本
          echo "Checking build scripts..."
          ls -la ./share/ci/
          
          # 设置环境变量到GitHub Actions
          echo "ST_DEPS_DIR=$(pwd)/deps" >> $GITHUB_ENV
          echo "PATH=$(pwd)/qt/bin:$PATH" >> $GITHUB_ENV

      - name: Test basic environment
        shell: bash
        run: |
          echo "Testing basic environment..."
          echo "Python version: $(python --version)"
          echo "Current directory: $(pwd)"
          echo "Available commands:"
          which python || echo "python not found"
          which cmake || echo "cmake not found"
          which ninja || echo "ninja not found"
          which make || echo "make not found"
          echo "Environment variables:"
          echo "ST_DEPS_DIR: $ST_DEPS_DIR"
          echo "PATH: $PATH"
          echo "OS: $OS"
          
          # 测试网络连接
          echo "Testing network connectivity..."
          curl -I https://download.qt.io/ || echo "curl failed, trying wget"
          wget --spider https://download.qt.io/ || echo "wget failed"
          
          # 测试Python网络功能
          echo "Testing Python network functionality..."
          python -c "import urllib.request; print('Python urllib works')" || echo "Python urllib failed"

      - name: Test Windows environment
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo "Testing Windows environment..."
          echo "OS environment variable: %OS%"
          echo "MSVC_VERSION: %MSVC_VERSION%"
          echo "Available Visual Studio installations:"
          where /q vswhere && vswhere -all -property installationPath || echo "vswhere not available"
          echo "Current directory:"
          dir

      - name: Download dependencies
        shell: bash
        run: |
          set -e
          echo "Starting dependency download..."
          
          # 确保在正确的工作目录
          cd $GITHUB_WORKSPACE
          echo "Working directory: $(pwd)"
          
          # 设置环境变量
          export ST_DEPS_DIR=$(pwd)/deps
          export PATH=$(pwd)/qt/bin:$PATH
          
          # 安装Qt (根据平台选择不同方法)
          if [ "${{ env.OS }}" = "linux" ]; then
            echo "Installing Qt via system package manager (Linux)..."
            if python ./share/ci/get_qt_system.py; then
              echo "Qt installation completed successfully"
            else
              echo "Qt installation failed"
              echo "Current directory contents after failure:"
              ls -la
              exit 1
            fi
          elif [ "${{ env.OS }}" = "win64" ]; then
            echo "Installing Qt for Windows..."
            if python ./share/ci/get_qt_windows.py; then
              echo "Qt installation completed successfully"
            else
              echo "Qt installation failed"
              echo "Current directory contents after failure:"
              ls -la
              exit 1
            fi
          fi
          
          # 暂时注释掉其他依赖，先测试Qt下载
          echo "Skipping other dependencies for now..."
          
          # # 下载SSL
          # echo "Downloading SSL..."
          # retry_count=0
          # while [ $retry_count -lt $max_retries ]; do
          #   echo "SSL download attempt $((retry_count + 1)) of $max_retries"
          #   if python ./share/ci/get_qt_ssl.py; then
          #     echo "SSL download completed successfully"
          #     break
          #   else
          #     retry_count=$((retry_count + 1))
          #     if [ $retry_count -lt $max_retries ]; then
          #       echo "SSL download failed, retrying in 30 seconds..."
          #       sleep 30
          #     else
          #       echo "SSL download failed after $max_retries attempts"
          #       exit 1
          #     fi
          #   fi
          # done
          
          # # 下载Leptonica
          # echo "Downloading Leptonica..."
          # retry_count=0
          # while [ $retry_count -lt $max_retries ]; do
          #   echo "Leptonica download attempt $((retry_count + 1)) of $max_retries"
          #   if python ./share/ci/get_leptonica.py; then
          #     echo "Leptonica download completed successfully"
          #     break
          #   else
          #     retry_count=$((retry_count + 1))
          #     if [ $retry_count -lt $max_retries ]; then
          #       echo "Leptonica download failed, retrying in 30 seconds..."
          #       sleep 30
          #     else
          #       echo "Leptonica download failed after $max_retries attempts"
          #       exit 1
          #     fi
          #   fi
          # done
          
          # # 下载Tesseract
          # echo "Downloading Tesseract..."
          # retry_count=0
          # while [ $retry_count -lt $max_retries ]; do
          #   echo "Tesseract download attempt $((retry_count + 1)) of $max_retries"
          #   if python ./share/ci/get_tesseract.py; then
          #     echo "Tesseract download completed successfully"
          #     break
          #   else
          #     retry_count=$((retry_count + 1))
          #     if [ $retry_count -lt $max_retries ]; then
          #       echo "Tesseract download failed, retrying in 30 seconds..."
          #       sleep 30
          #     else
          #       echo "Tesseract download failed after $max_retries attempts"
          #       exit 1
          #     fi
          #   fi
          # done
          
          # # 下载Hunspell
          # echo "Downloading Hunspell..."
          # retry_count=0
          # while [ $retry_count -lt $max_retries ]; do
          #   echo "Hunspell download attempt $((retry_count + 1)) of $max_retries"
          #   if python ./share/ci/get_hunspell.py; then
          #     echo "Hunspell download completed successfully"
          #     break
          #   else
          #     retry_count=$((retry_count + 1))
          #     if [ $retry_count -lt $max_retries ]; then
          #       echo "Hunspell download failed, retrying in 30 seconds..."
          #       sleep 30
          #     else
          #       echo "Hunspell download failed after $max_retries attempts"
          #       exit 1
          #     fi
          #   fi
          # done
          
          echo "All dependencies downloaded successfully"
          
          # 检查下载的文件
          echo "Checking downloaded files..."
          echo "Current directory contents:"
          ls -la
          echo "Qt directory contents:"
          if [ -d "qt" ]; then
            ls -la qt/
          else
            echo "Qt directory not found"
          fi
          echo "Dependencies directory contents:"
          if [ -d "deps" ]; then
            ls -la deps/
          else
            echo "Dependencies directory not found"
          fi

      # 暂时注释掉测试和构建步骤，先测试依赖下载
      # - name: Run tests
      #   shell: bash
      #   run: |
      #     set -e
      #     echo "Running tests..."
      #     
      #     # 设置环境变量
      #     export ST_DEPS_DIR=$(pwd)/deps
      #     export PATH=$(pwd)/qt/bin:$PATH
      #     
      #     # 运行测试
      #     python ./share/ci/test.py

      # - name: Build application
      #   shell: bash
      #   run: |
      #     set -e
      #     echo "Building application..."
      #     
      #     # 设置环境变量
      #     export ST_DEPS_DIR=$(pwd)/deps
      #     export PATH=$(pwd)/qt/bin:$PATH
      #     
      #     # 构建应用
      #     python ./share/ci/build.py

      # - name: Create package
      #   shell: bash
      #   run: |
      #     set -e
      #     echo "Creating package..."
      #     
      #     # 设置环境变量
      #     export ST_DEPS_DIR=$(pwd)/deps
      #     export PATH=$(pwd)/qt/bin:$PATH
      #     
      #     # 创建包
      #     if [ "${{ env.OS }}" = "linux" ]; then
      #       python ./share/ci/appimage.py
      #     elif [ "${{ env.OS }}" = "win64" ]; then
      #       python ./share/ci/windeploy.py
      #     fi
      #     
      #     # 获取构建产物名称
      #     echo "Getting artifact name..."
      #     artifact_name=$(python ./share/ci/release.py artifact_name)
      #     echo "Artifact name: $artifact_name"
      #     echo "artifact=$artifact_name" >> $GITHUB_ENV
      #     
      #     # 检查构建产物
      #     if [ -f "$artifact_name" ]; then
      #       echo "Build artifact created successfully: $artifact_name"
      #       ls -la "$artifact_name"
      #     else
      #       echo "Build artifact not found: $artifact_name"
      #       ls -la *.zip *.exe *.AppImage 2>/dev/null || echo "No build artifacts found"
      #       echo "Current directory contents:"
      #       ls -la
      #       exit 1
      #     fi

      - name: Upload build artifact
        if: env.artifact != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact }}
          path: ./${{ env.artifact }}

      - name: Download release url
        if: contains(github.ref, '/tags/')
        uses: actions/download-artifact@v4
        with:
          name: release_upload_url
          path: ./

      - name: Set release env
        if: contains(github.ref, '/tags/')
        shell: bash
        run: echo "upload_url=`cat ./release_upload_url`" >> $GITHUB_ENV

      - name: Upload release artifacts
        if: contains(github.ref, '/tags/')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.upload_url }}
          asset_path: ./${{ env.artifact }}
          asset_name: ${{ env.artifact }}
          asset_content_type: application/zip
