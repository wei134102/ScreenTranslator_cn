name: App build

on: 
  workflow_dispatch:
  # push:

jobs:
  release:
    name: Create release
    if: contains(github.ref, '/tags/')
    runs-on: ubuntu-22.04
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store release url
        run: echo "${{ steps.create_release.outputs.upload_url }}" > ./release_upload_url

      - name: Upload release url
        uses: actions/upload-artifact@v4
        with:
          path: ./release_upload_url
          name: release_upload_url

  build:
    name: Build ${{ matrix.config.name }}${{ matrix.config.tag }}
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 60
    env:
      OS: ${{ matrix.config.name }}
      MSVC_VERSION: C:/Program Files/Microsoft Visual Studio/2022/Enterprise
    strategy:
      matrix:
        config:
          - { name: "linux", os: ubuntu-22.04 }
          # 暂时注释掉Windows构建，先确保Linux构建正常
          - { name: "win64", os: windows-latest }
          # - { name: "win32", os: windows-latest }
          # - { name: "macos", os: macos-latest }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install system libs
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev libxkbcommon-x11-0 libxcb-*
          echo "QMAKE_FLAGS=QMAKE_CXX=g++-10 QMAKE_CC=gcc-10 QMAKE_LINK=g++-10" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ env.OS }}-${{ hashFiles('./share/ci/*.py') }}

      - name: Debug environment
        shell: bash
        run: |
          echo "=== Environment Debug Info ==="
          echo "OS: ${{ env.OS }}"
          echo "Platform: $(uname -a)"
          echo "Python version: $(python --version)"
          echo "Current directory: $(pwd)"
          echo "Available disk space:"
          df -h
          echo "Memory info:"
          free -h || echo "free command not available"
          echo "=== End Debug Info ==="

      - name: Check Windows environment
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo "=== Windows Environment Check ==="
          echo "Visual Studio version:"
          dir "C:\Program Files\Microsoft Visual Studio" 2>nul || echo "Visual Studio not found in default location"
          echo "Available Visual Studio installations:"
          where /q vswhere && vswhere -all -property installationPath || echo "vswhere not available"
          echo "=== End Windows Check ==="

      - name: Make a release
        shell: bash
        run: |
          set -e
          echo "Starting release process..."
          echo "Current directory: $(pwd)"
          echo "OS: ${{ env.OS }}"
          echo "Platform: $(uname -a)"
          
          # 检查依赖目录
          if [ -d "deps" ]; then
            echo "Dependencies directory exists"
            ls -la deps/
          else
            echo "Dependencies directory does not exist"
          fi
          
          # 检查Python和必要工具
          echo "Checking Python installation..."
          python --version
          which python
          
          # 检查构建脚本
          echo "Checking build scripts..."
          ls -la ./share/ci/
          
          # 运行构建脚本（添加重试机制）
          echo "Running release.py..."
          max_retries=3
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            echo "Attempt $((retry_count + 1)) of $max_retries"
            if python ./share/ci/release.py; then
              echo "Build completed successfully"
              break
            else
              retry_count=$((retry_count + 1))
              if [ $retry_count -lt $max_retries ]; then
                echo "Build failed, retrying in 30 seconds..."
                sleep 30
              else
                echo "Build failed after $max_retries attempts"
                exit 1
              fi
            fi
          done
          
          # 获取构建产物名称
          echo "Getting artifact name..."
          artifact_name=$(python ./share/ci/release.py artifact_name)
          echo "Artifact name: $artifact_name"
          echo "artifact=$artifact_name" >> $GITHUB_ENV
          
          # 检查构建产物
          if [ -f "$artifact_name" ]; then
            echo "Build artifact created successfully: $artifact_name"
            ls -la "$artifact_name"
          else
            echo "Build artifact not found: $artifact_name"
            ls -la *.zip *.exe 2>/dev/null || echo "No zip or exe files found"
            echo "Current directory contents:"
            ls -la
          fi

      - name: Upload build artifact
        if: env.artifact != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact }}
          path: ./${{ env.artifact }}

      - name: Download release url
        if: contains(github.ref, '/tags/')
        uses: actions/download-artifact@v4
        with:
          name: release_upload_url
          path: ./

      - name: Set release env
        if: contains(github.ref, '/tags/')
        shell: bash
        run: echo "upload_url=`cat ./release_upload_url`" >> $GITHUB_ENV

      - name: Upload release artifacts
        if: contains(github.ref, '/tags/')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.upload_url }}
          asset_path: ./${{ env.artifact }}
          asset_name: ${{ env.artifact }}
          asset_content_type: application/zip
